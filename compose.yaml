version: '3.8'

services:
  # Zookeeper service for Kafka
  zookeeper:
    image: zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181" # Expose Zookeeper port
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092" # Expose Kafka port
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181 # Use the service name 'zookeeper'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092 # Use the service name 'kafka'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # Set replication factor to 1 for development
    depends_on:
      - zookeeper # Ensure Zookeeper starts before Kafka
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 5s

  # CommentService microservice
  commentservice:
    build:
      context: ./CommentService
      dockerfile: Dockerfile
    container_name: commentservice
    ports:
      - '8003:8003' # Map port 8003 on the host to port 8003 in the container
    depends_on:
      kafka:
        condition: service_healthy
  # TaskService microservice
  taskservice:
    build:
      context: ./TaskService
      dockerfile: Dockerfile
    container_name: taskservice
    ports:
      - '8002:8002' # Map port 8002 on the host to port 8002 in the container

  # UserService microservice
  userservice:
    build:
      context: ./UserService
      dockerfile: Dockerfile
    container_name: userservice
    ports:
      - '8001:8001'
    volumes:
      - ./UserService:/UserService # Sync local code with container
      - /UserService/node_modules # Avoid overwriting node_modules
    working_dir: /UserService # Ensure nodemon is run in the right directory
    command: nodemon index.js # Use nodemon for auto-restart on changes

  # KafkaService microservice
  kafkaservice:
    environment:
      KAFKA_BROKER: kafka:9092
      KAFKA_CLIENT_ID: kafka-service
    build:
      context: ./KafkaService
      dockerfile: Dockerfile
    container_name: kafkaservice
    ports:
      - '9000:9000' # Map port 9000 on the host to port 9000 in the container
    depends_on:
      kafka:
        condition: service_healthy

  # Nginx proxy service
  nginx-proxy:
    build:
      context: ./nginx-docker
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - commentservice
      - taskservice
      - userservice
      - kafkaservice
